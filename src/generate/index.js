// src/generate/index.js
import { readdirSync, readFileSync, statSync, writeFileSync } from 'fs';
import { dirname, join, relative } from 'path';
import { colors } from '../utils/colors.js';

function getAllMswFiles(dir) {
  const files = [];

  function traverse(currentDir) {
    const items = readdirSync(currentDir);

    items.forEach((item) => {
      const fullPath = join(currentDir, item);
      const stat = statSync(fullPath);

      if (stat.isDirectory()) {
        traverse(fullPath);
      } else if (item.endsWith('.msw.ts')) {
        files.push(fullPath);
      }
    });
  }

  traverse(dir);
  return files;
}

function extractMockFunctionNames(filePath, includeMethods) {
  const content = readFileSync(filePath, 'utf-8');
  const matches = [];

  includeMethods.forEach((method) => {
    const regex = new RegExp(
      `export const (${method}\\w+Mock)(?!Handler)\\s*=`,
      'g'
    );
    let match;

    while ((match = regex.exec(content)) !== null) {
      const functionName = match[1];
      if (!functionName.includes('Response')) {
        matches.push(functionName);
      }
    }
  });

  return matches;
}

export function generateHandlers(config) {
  const { endpointsDir, outputFile, includeMethods } = config;

  console.log(`${colors.cyan}🔍 Scanning MSW files...${colors.reset}`);

  const mswFiles = getAllMswFiles(endpointsDir);
  console.log(
    `${colors.dim}   Found ${colors.bright}${mswFiles.length}${colors.reset}${colors.dim} .msw.ts files${colors.reset}`
  );

  const mockFiles = mswFiles
    .map((file) => ({
      path: file,
      functionNames: extractMockFunctionNames(file, includeMethods),
    }))
    .filter((file) => file.functionNames.length > 0);

  const imports = mockFiles.map((file) => {
    const relativePath = relative(dirname(outputFile), file.path)
      .replace(/\\/g, '/')
      .replace('.ts', '');

    return `import { ${file.functionNames.join(
      ', '
    )} } from '${relativePath}';`;
  });

  const allMockFunctions = mockFiles.flatMap((file) => file.functionNames);

  const content = `/**
 * Auto-generated file. Do not edit manually.
 * Generated at: ${new Date().toISOString()}
 * 
 * Included HTTP methods: ${includeMethods.join(', ').toUpperCase()}
 * Total endpoints: ${allMockFunctions.length}
 * 
 * Generated by @cy/msw-openapi-helper
 */

${imports.join('\n')}

export const handlers = [
${allMockFunctions.map((fn) => `  ...${fn}(),`).join('\n')}
];
`;

  writeFileSync(outputFile, content, 'utf-8');

  console.log(
    `\n${colors.green}✅ Successfully generated handlers.ts${colors.reset}`
  );
  console.log(
    `   ${colors.yellow}🎯 Methods:${colors.reset} ${
      colors.bright
    }${includeMethods.join(', ').toUpperCase()}${colors.reset}`
  );
  console.log(
    `   ${colors.blue}📁 ${mockFiles.length}${colors.reset} MSW files processed`
  );
  console.log(
    `   ${colors.magenta}🔧 ${allMockFunctions.length}${colors.reset} total handlers exported`
  );
  console.log(`   ${colors.cyan}📄 Output:${colors.reset} ${outputFile}\n`);
}
